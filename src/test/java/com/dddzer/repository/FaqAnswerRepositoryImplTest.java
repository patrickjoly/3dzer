/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/service/ServiceImplTest.e.vm.java
 */
package com.dddzer.repository;

import static org.fest.assertions.Assertions.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import javax.persistence.NonUniqueResultException;
import javax.persistence.NoResultException;

import org.junit.Before;
import org.junit.Test;

import com.dddzer.domain.FaqAnswer;
import com.dddzer.repository.FaqAnswerRepositoryImpl;
import com.dddzer.dao.FaqAnswerDao;
import com.dddzer.dao.support.SearchParameters;

/**
 * Unit test on FaqAnswerRepositoryImpl
 */
public class FaqAnswerRepositoryImplTest {

    private FaqAnswerRepositoryImpl faqAnswerRepositoryImpl;
    private FaqAnswerDao faqAnswerDao;

    @Before
    public void setUp() {
        // called before each test.
        faqAnswerRepositoryImpl = new FaqAnswerRepositoryImpl();
        faqAnswerDao = mock(FaqAnswerDao.class);
        faqAnswerRepositoryImpl.setFaqAnswerDao(faqAnswerDao);
    }

    @Test
    public void testFindUniqueOrNoneCaseNone() {
        FaqAnswer none = null;

        when(faqAnswerDao.findUniqueOrNone(any(FaqAnswer.class), any(SearchParameters.class))).thenReturn(none);

        FaqAnswer result = faqAnswerRepositoryImpl.findUniqueOrNone(new FaqAnswer());

        assertThat(result).isNull();
        verify(faqAnswerDao, times(1)).findUniqueOrNone(any(FaqAnswer.class), any(SearchParameters.class));
    }

    @Test
    public void testFindUniqueOrNoneCaseUnique() {
        FaqAnswer unique = new FaqAnswer();

        when(faqAnswerDao.findUniqueOrNone(any(FaqAnswer.class), any(SearchParameters.class))).thenReturn(unique);

        FaqAnswer result = faqAnswerRepositoryImpl.findUniqueOrNone(new FaqAnswer());

        assertThat(result).isNotNull();
        verify(faqAnswerDao, times(1)).findUniqueOrNone(any(FaqAnswer.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueOrNoneCaseMultiple() {
        when(faqAnswerDao.findUniqueOrNone(any(FaqAnswer.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        faqAnswerRepositoryImpl.findUniqueOrNone(new FaqAnswer());
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NoResultException.class)
    public void testFindUniqueCaseNone() {
        when(faqAnswerDao.findUnique(any(FaqAnswer.class), any(SearchParameters.class))).thenThrow(NoResultException.class);

        faqAnswerRepositoryImpl.findUnique(new FaqAnswer());
    }

    @Test
    public void testFindUniqueCaseUnique() {
        FaqAnswer unique = new FaqAnswer();

        when(faqAnswerDao.findUnique(any(FaqAnswer.class), any(SearchParameters.class))).thenReturn(unique);

        FaqAnswer result = faqAnswerRepositoryImpl.findUnique(new FaqAnswer());

        assertThat(result).isNotNull();
        verify(faqAnswerDao, times(1)).findUnique(any(FaqAnswer.class), any(SearchParameters.class));
    }

    @SuppressWarnings("unchecked")
    @Test(expected = NonUniqueResultException.class)
    public void testFindUniqueCaseMultiple() {
        when(faqAnswerDao.findUnique(any(FaqAnswer.class), any(SearchParameters.class))).thenThrow(NonUniqueResultException.class);

        faqAnswerRepositoryImpl.findUnique(new FaqAnswer());
    }
}