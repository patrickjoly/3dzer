/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
 */
package com.dddzer.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.dddzer.util.*;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Email;
import com.dddzer.domain.Account;

/**
 * Basic tests for User
 */
@SuppressWarnings("unused")
public class UserTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        User model = new User();
        assertFalse(model.isIdSet());
    }

    @Test
    public void isIdSetReturnsTrue() {
        User model = new User();
        model.setId(ValueGenerator.getUniqueInteger());
        assertNotNull(model.getId());
        assertTrue(model.isIdSet());
    }

    // test columns methods

    //-------------------------------------------------------------
    // Many to One:  User.accountId ==> Account.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setAccount() {
        User many = new User();

        // init
        Account one = new Account();

        one.setId(ValueGenerator.getUniqueInteger());
        many.setAccount(one);

        // make sure it is propagated properly
        assertNotNull(many.getAccountId());
        assertEquals(one, many.getAccount());
        assertSame(many.getAccountId(), one.getId());
        // now set it to back to null
        many.setAccount(null);

        // make sure null is propagated properly
        assertNull(many.getAccount());

        // make sure it is propagated on fk column as well
        assertNull(many.getAccountId());
    }

    @Test
    public void toStringNotNull() {
        User model = new User();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingPk() {
        User model1 = new User();
        User model2 = new User();

        Integer id = ValueGenerator.getUniqueInteger();
        model1.setId(id);
        model2.setId(id);

        model1.setEmail("dummy@dummy.com");
        model2.setEmail("dummy@dummy.com");

        model1.setEnbled(1);
        model2.setEnbled(1);

        model1.setFirstName("a");
        model2.setFirstName("a");

        model1.setLastName("a");
        model2.setLastName("a");

        model1.setStreet("a");
        model2.setStreet("a");

        model1.setCity("a");
        model2.setCity("a");

        model1.setCountry("a");
        model2.setCountry("a");

        model1.setZip("a");
        model2.setZip("a");

        model1.setCreationDate(new Date());
        model2.setCreationDate(new Date());

        model1.setCreationAuthor("a");
        model2.setCreationAuthor("a");

        model1.setModificationDate(new Date());
        model2.setModificationDate(new Date());

        model1.setModificationAuthor("a");
        model2.setModificationAuthor("a");

        model1.setVersion(1);
        model2.setVersion(1);
        assertTrue(model1.isIdSet());
        assertTrue(model2.isIdSet());
        assertTrue(model1.hashCode() == model2.hashCode());
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
    }
}