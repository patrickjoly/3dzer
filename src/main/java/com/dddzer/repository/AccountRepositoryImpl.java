/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/repository/RepositoryImpl.e.vm.java
 */
package com.dddzer.repository;

import static org.apache.commons.lang.StringUtils.isNotEmpty;

import javax.inject.Inject;

import org.apache.log4j.Logger;

import javax.inject.Named;
import javax.inject.Singleton;
import org.springframework.transaction.annotation.Transactional;

import com.dddzer.dao.support.GenericDao;
import com.dddzer.repository.support.RepositoryImpl;
import com.dddzer.domain.Account;
import com.dddzer.dao.AccountDao;

/**
 * Default implementation of the {@link AccountRepository} interface.
 * Note: you may use multiple DAO from this layer.
 * @see AccountRepository
 */
@Named("accountRepository")
@Singleton
public class AccountRepositoryImpl extends RepositoryImpl<Account, Integer> implements AccountRepository {

    @SuppressWarnings("unused")
    private static final Logger log = Logger.getLogger(AccountRepositoryImpl.class);

    protected AccountDao accountDao;

    @Inject
    public void setAccountDao(AccountDao accountDao) {
        this.accountDao = accountDao;
    }

    /**
     * Dao getter used by the {@link RepositoryImpl}.
     */
    @Override
    public GenericDao<Account, Integer> getDao() {
        return accountDao;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account getNew() {
        return new Account();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account getNewWithDefaults() {
        Account result = getNew();
        result.initDefaultValues();
        return result;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Account get(Account model) {
        if (model == null) {
            return null;
        }

        if (model.isIdSet()) {
            return super.get(model);
        }

        if (!isNotEmpty(model.getLogin())) {
            Account result = getByLogin(model.getLogin());
            if (result != null) {
                return result;
            }
        }

        if (!isNotEmpty(model.getPassword())) {
            Account result = getByPassword(model.getPassword());
            if (result != null) {
                return result;
            }
        }

        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Account getByLogin(String _login) {
        Account account = new Account();
        account.setLogin(_login);
        return findUniqueOrNone(account);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByLogin(String login) {
        delete(getByLogin(login));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional(readOnly = true)
    public Account getByPassword(String _password) {
        Account account = new Account();
        account.setPassword(_password);
        return findUniqueOrNone(account);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    @Transactional
    public void deleteByPassword(String password) {
        delete(getByPassword(password));
    }
}