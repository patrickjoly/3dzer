/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/util/MessageUtil.p.vm.java
 */
package com.dddzer.web.util;

import static javax.faces.application.FacesMessage.SEVERITY_ERROR;
import static javax.faces.application.FacesMessage.SEVERITY_FATAL;
import static javax.faces.application.FacesMessage.SEVERITY_INFO;
import static javax.faces.application.FacesMessage.SEVERITY_WARN;

import javax.faces.application.FacesMessage;
import javax.faces.application.FacesMessage.Severity;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import org.apache.log4j.Logger;
import org.springframework.context.annotation.Lazy;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.OptimisticLockingFailureException;
import org.springframework.security.access.AccessDeniedException;

import com.dddzer.domain.Identifiable;
import com.dddzer.printer.TypeAwarePrinter;
import com.dddzer.util.ResourcesUtil;

/**
 * Convenient bean to create JSF info/warn/error messages.
 * Business exceptions can be mapped to user friendly messages inside the error(Exception e) method. 
 */
@Named
@Singleton
@Lazy(false)
public class MessageUtil {
    private static final Logger log = Logger.getLogger(MessageUtil.class);
    private static MessageUtil instance;

    @Inject
    private ResourcesUtil resourcesUtil;
    @Inject
    private TypeAwarePrinter printer;

    public MessageUtil() {
        instance = this;
    }

    public static MessageUtil getInstance() {
        return instance;
    }

    public static String toCssFriendly(Severity severity) {
        if (severity.equals(SEVERITY_INFO)) {
            return "info";
        } else if (severity.equals(SEVERITY_WARN)) {
            return "warn";
        } else if (severity.equals(SEVERITY_ERROR)) {
            return "error";
        } else if (severity.equals(SEVERITY_FATAL)) {
            return "fatal";
        }

        throw new IllegalStateException("Unexpected message severity: " + severity.toString());
    }

    // -- info

    public void info(String summaryKey, Object... args) {
        addFacesMessageUsingKey(SEVERITY_INFO, summaryKey, args);
    }

    public void infoEntity(String summaryKey, Identifiable<?> entity) {
        addFacesMessageUsingKey(SEVERITY_INFO, summaryKey, printer.print(entity));
    }

    public void infoText(String summaryText) {
        addFacesMessageUsingText(SEVERITY_INFO, summaryText);
    }

    public FacesMessage newInfo(String summaryKey, Object... args) {
        return newFacesMessageUsingKey(SEVERITY_INFO, summaryKey, args);
    }

    // -- warning

    public void warning(String summaryKey, Object... args) {
        addFacesMessageUsingKey(SEVERITY_WARN, summaryKey, args);
    }

    public void warningText(String summaryText) {
        addFacesMessageUsingText(SEVERITY_WARN, summaryText);
    }

    public FacesMessage newWarning(String summaryKey, Object... args) {
        return newFacesMessageUsingKey(SEVERITY_WARN, summaryKey, args);
    }

    // -- error

    public void error(String summaryKey, Object... args) {
        addFacesMessageUsingKey(SEVERITY_ERROR, summaryKey, args);
    }

    public void errorText(String summaryText) {
        addFacesMessageUsingText(SEVERITY_ERROR, summaryText);
    }

    public FacesMessage newError(String summaryKey, Object... args) {
        return newFacesMessageUsingKey(SEVERITY_ERROR, summaryKey, args);
    }

    /**
     * Map the passed exception to an error message.
     * Any potential exception (such as business exception) requiring a special message should be mapped here as well.
     */
    public void error(Throwable e) {
        if (ExceptionUtil.isCausedBy(e, DataIntegrityViolationException.class)) {
            error("error_unique_constraint_violation");
        } else if (ExceptionUtil.isCausedBy(e, OptimisticLockingFailureException.class)) {
            error("error_concurrent_modification");
        } else if (ExceptionUtil.isCausedBy(e, AccessDeniedException.class)) {
            // works only if the spring security filter is before the exception filter, 
            // that is if the exception filter handles the exception first.
            error("error_access_denied");
        } else {
            error("status_exception_ko", getMessage(e));
            log.error("====> !!ATTENTION!! DEVELOPERS should provide a less generic error message for the cause of this exception <====");
        }
    }

    private void addFacesMessage(FacesMessage fm) {
        if (fm != null) {
            FacesContext.getCurrentInstance().addMessage(null, fm);
        }
    }

    private String getMessage(Throwable e) {
        String message = e.getClass().getCanonicalName();
        Throwable current = e;
        while (current != null) {
            if (current.getMessage() != null && !current.getMessage().trim().isEmpty()) {
                message = current.getMessage();
            }
            current = current.getCause();
        }
        return message;
    }

    private void addFacesMessageUsingKey(Severity severity, String summaryKey, Object arg) {
        addFacesMessageUsingKey(severity, summaryKey, new Object[] { arg });
    }

    private void addFacesMessageUsingKey(Severity severity, String summaryKey, Object[] args) {
        addFacesMessage(newFacesMessageUsingKey(severity, summaryKey, args));
    }

    private void addFacesMessageUsingText(Severity severity, String text) {
        addFacesMessage(newFacesMessageUsingText(severity, text));
    }

    private FacesMessage newFacesMessageUsingKey(Severity severity, String summaryKey, Object[] args) {
        return newFacesMessageUsingText(severity, resourcesUtil.getProperty(summaryKey, args));
    }

    private FacesMessage newFacesMessageUsingText(Severity severity, String text) {
        FacesMessage fm = new FacesMessage(text);
        fm.setSeverity(severity);
        return fm;
    }
}