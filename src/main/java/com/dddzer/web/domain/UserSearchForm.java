/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
 */
package com.dddzer.web.domain;

import static com.dddzer.dao.support.EntitySelector.newEntitySelector;
import static com.dddzer.dao.support.Ranges.RangeDate.newRangeDate;
import static com.dddzer.dao.support.Ranges.RangeInteger.newRangeInteger;
import static com.dddzer.domain.User_.accountId;
import static com.dddzer.domain.User_.enbled;
import static com.dddzer.domain.User_.modificationDate;
import javax.inject.Named;
import org.springframework.context.annotation.Scope;
import com.dddzer.dao.support.EntitySelector;
import com.dddzer.dao.support.Ranges.RangeDate;
import com.dddzer.dao.support.Ranges.RangeInteger;
import com.dddzer.dao.support.SearchParameters;
import com.dddzer.domain.Account;
import com.dddzer.domain.User;
import com.dddzer.web.domain.support.GenericSearchForm;

/**
 * View Helper to find/select {@link User}.
 * It exposes a {@link User} instance so it can be used in search by Example query.
 */
@Named
@Scope("conversation")
public class UserSearchForm extends GenericSearchForm<User, UserSearchForm> {
    private static final long serialVersionUID = 1L;

    private User user = new User();
    private RangeInteger<User> enbledRange = newRangeInteger(enbled);
    private RangeDate<User> modificationDateRange = newRangeDate(modificationDate);
    private EntitySelector<User, Account, Integer> accountSelector = newEntitySelector(accountId);

    public User getUser() {
        return user;
    }

    @Override
    protected User getEntity() {
        return user;
    }

    // Ranges, used from the view.
    public RangeInteger<User> getEnbledRange() {
        return enbledRange;
    }

    public RangeDate<User> getModificationDateRange() {
        return modificationDateRange;
    }

    // Selectors for x-to-one associations
    public EntitySelector<User, Account, Integer> getAccountSelector() {
        return accountSelector;
    }

    public SearchParameters toSearchParameters() {
        return new SearchParameters() //
                .anywhere() //
                .range(enbledRange) //
                .range(modificationDateRange) //
                .entitySelector(accountSelector) //
        ;
    }

    @Override
    public UserSearchForm newInstance() {
        return new UserSearchForm();
    }

    @Override
    public void resetWithOther(UserSearchForm other) {
        this.user = other.getUser();
        this.enbledRange = other.getEnbledRange();
        this.modificationDateRange = other.getModificationDateRange();
        this.accountSelector = other.getAccountSelector();
    }
}