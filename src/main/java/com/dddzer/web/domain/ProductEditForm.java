/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package com.dddzer.web.domain;

import static com.dddzer.web.conversation.ConversationHolder.getCurrentConversation;
import javax.inject.Inject;
import javax.inject.Named;
import org.springframework.context.annotation.Scope;
import com.dddzer.domain.Account;
import com.dddzer.domain.Part;
import com.dddzer.domain.Product;
import com.dddzer.domain.ProductType;
import com.dddzer.repository.ProductRepository;
import com.dddzer.web.conversation.ConversationCallBack;
import com.dddzer.web.conversation.ConversationContext;
import com.dddzer.web.domain.AccountController;
import com.dddzer.web.domain.PartController;
import com.dddzer.web.domain.ProductTypeController;
import com.dddzer.web.domain.support.GenericEditForm;

/**
 * View Helper/Controller to edit {@link Product}.
 */
@Named
@Scope("conversation")
public class ProductEditForm extends GenericEditForm<Product, Integer> {

    @Inject
    public void setProductRepository(ProductRepository productRepository) {
        setRepository(productRepository);
    }

    public Product getProduct() {
        return getEntity();
    }

    // --------------------------------------------------
    // Support for auto-complete and callback many to one 
    // --------------------------------------------------

    public void setSelectedPart(Part part) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        /*
        if (getProduct().getPart() != null) {
            getCurrentConversation().getEntityManager().detach(getProduct().getPart());
        } */

        if (part != null) {
            getProduct().setPart(getCurrentConversation().getEntityManager().merge(part));
        } else {
            getProduct().setPart(null);
        }
    }

    public Part getSelectedPart() {
        return getProduct().getPart();
    }

    public void setSelectedAccout(Account account) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        if (getProduct().getAccout() != null) {
            getCurrentConversation().getEntityManager().detach(getProduct().getAccout());
        }

        if (account != null) {
            getProduct().setAccout(getCurrentConversation().getEntityManager().merge(account));
        } else {
            getProduct().setAccout(null);
        }
    }

    public Account getSelectedAccout() {
        return getProduct().getAccout();
    }

    public void setSelectedProductType(ProductType productType) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        if (getProduct().getProductType() != null) {
            getCurrentConversation().getEntityManager().detach(getProduct().getProductType());
        }

        if (productType != null) {
            getProduct().setProductType(getCurrentConversation().getEntityManager().merge(productType));
        } else {
            getProduct().setProductType(null);
        }
    }

    public ProductType getSelectedProductType() {
        return getProduct().getProductType();
    }

    // --------------------------------------------
    // Actions for part association
    // --------------------------------------------

    public String viewPart() {
        ConversationContext<Part> ctx = PartController.newEditContext(getProduct().getPart());
        ctx.setLabelWithKey("product_part");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    // --------------------------------------------
    // Actions for accout association
    // --------------------------------------------

    public String viewAccout() {
        ConversationContext<Account> ctx = AccountController.newEditContext(getProduct().getAccout());
        ctx.setLabelWithKey("product_accout");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    public String selectAccout() {
        ConversationContext<Account> ctx = AccountController.newSearchContext();
        ctx.setLabelWithKey("product_accout");
        ctx.setCallBack(selectAccoutCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Account> selectAccoutCallBack = new ConversationCallBack<Account>() {
        private static final long serialVersionUID = 1L;

        // will be invoked from the ProductLazyDataModel
        @Override
        protected void onSelected(Account account) {
            setSelectedAccout(account);
            messageUtil.infoEntity("status_selected_ok", getProduct().getAccout());
        }
    };

    public String addAccout() {
        ConversationContext<Account> ctx = AccountController.newEditContext(new Account());
        ctx.setLabelWithKey("product_accout");
        ctx.setCallBack(addAccoutCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Account> addAccoutCallBack = new ConversationCallBack<Account>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Account account) {
            // detach the currently set target if present
            if (getProduct().getAccout() != null) {
                getCurrentConversation().getEntityManager().detach(getProduct().getAccout());
            }

            getProduct().setAccout(account);
            messageUtil.infoEntity("status_created_ok", account);
        }
    };

    public String editAccout() {
        ConversationContext<Account> ctx = AccountController.newEditContext(getProduct().getAccout());
        ctx.setLabelWithKey("product_accout");
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    // --------------------------------------------
    // Actions for productType association
    // --------------------------------------------

    public String viewProductType() {
        ConversationContext<ProductType> ctx = ProductTypeController.newEditContext(getProduct().getProductType());
        ctx.setLabelWithKey("product_productType");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    public String selectProductType() {
        ConversationContext<ProductType> ctx = ProductTypeController.newSearchContext();
        ctx.setLabelWithKey("product_productType");
        ctx.setCallBack(selectProductTypeCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<ProductType> selectProductTypeCallBack = new ConversationCallBack<ProductType>() {
        private static final long serialVersionUID = 1L;

        // will be invoked from the ProductLazyDataModel
        @Override
        protected void onSelected(ProductType productType) {
            setSelectedProductType(productType);
            messageUtil.infoEntity("status_selected_ok", getProduct().getProductType());
        }
    };

    public String addProductType() {
        ConversationContext<ProductType> ctx = ProductTypeController.newEditContext(new ProductType());
        ctx.setLabelWithKey("product_productType");
        ctx.setCallBack(addProductTypeCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<ProductType> addProductTypeCallBack = new ConversationCallBack<ProductType>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(ProductType productType) {
            // detach the currently set target if present
            if (getProduct().getProductType() != null) {
                getCurrentConversation().getEntityManager().detach(getProduct().getProductType());
            }

            getProduct().setProductType(productType);
            messageUtil.infoEntity("status_created_ok", productType);
        }
    };

    public String editProductType() {
        ConversationContext<ProductType> ctx = ProductTypeController.newEditContext(getProduct().getProductType());
        ctx.setLabelWithKey("product_productType");
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }
}