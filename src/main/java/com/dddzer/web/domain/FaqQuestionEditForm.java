/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package com.dddzer.web.domain;

import static com.dddzer.web.conversation.ConversationHolder.getCurrentConversation;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import org.omnifaces.util.Faces;
import org.primefaces.event.SelectEvent;
import org.springframework.context.annotation.Scope;
import com.dddzer.domain.Account;
import com.dddzer.domain.FaqAnswer;
import com.dddzer.domain.FaqQuestion;
import com.dddzer.repository.FaqQuestionRepository;
import com.dddzer.web.conversation.ConversationCallBack;
import com.dddzer.web.conversation.ConversationContext;
import com.dddzer.web.domain.AccountController;
import com.dddzer.web.domain.support.GenericEditForm;
import com.dddzer.web.domain.support.SelectableListDataModel;
import com.dddzer.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link FaqQuestion}.
 */
@Named
@Scope("conversation")
public class FaqQuestionEditForm extends GenericEditForm<FaqQuestion, Integer> {
    private TabBean tabBean = new TabBean();
    private SelectableListDataModel<FaqAnswer> faqAnswers;

    @Inject
    public void setFaqQuestionRepository(FaqQuestionRepository faqQuestionRepository) {
        setRepository(faqQuestionRepository);
    }

    /**
     * Prepare the x-to-many list data models.
     */
    @Override
    @PostConstruct
    protected void init() {
        super.init();

        // _HACK_ Attention: you must realize that associations below (when lazy) are fetched from the view, non transactionnally.

        if (faqAnswers == null) {
            faqAnswers = new SelectableListDataModel<FaqAnswer>(getFaqQuestion().getFaqAnswers());
        }
    }

    public FaqQuestion getFaqQuestion() {
        return getEntity();
    }

    // --------------------------------------------------
    // Support for auto-complete and callback many to one 
    // --------------------------------------------------

    public void setSelectedAccount(Account account) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        /*
        if (getFaqQuestion().getAccount() != null) {
            getCurrentConversation().getEntityManager().detach(getFaqQuestion().getAccount());
        } */

        if (account != null) {
            getFaqQuestion().setAccount(getCurrentConversation().getEntityManager().merge(account));
        } else {
            getFaqQuestion().setAccount(null);
        }
    }

    public Account getSelectedAccount() {
        return getFaqQuestion().getAccount();
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    public TabBean getTabBean() {
        return tabBean;
    }

    public SelectableListDataModel<FaqAnswer> getFaqAnswers() {
        return faqAnswers;
    }

    // --------------------------------------------
    // Actions for account association
    // --------------------------------------------

    public String viewAccount() {
        ConversationContext<Account> ctx = AccountController.newEditContext(getFaqQuestion().getAccount());
        ctx.setLabelWithKey("faqQuestion_account");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    // --------------------------------------------
    // Actions for faqAnswer association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected faqAnswer.
     */
    public String editFaqAnswer() {
        ConversationContext<FaqAnswer> ctx = FaqAnswerController.newEditContext(faqAnswers.getSelectedRow());
        ctx.setLabelWithKey("faqQuestion_faqAnswers");
        ctx.setCallBack(editFaqAnswerCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<FaqAnswer> editFaqAnswerCallBack = new ConversationCallBack<FaqAnswer>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(FaqAnswer faqAnswer) {
            messageUtil.infoEntity("status_edited_ok", faqAnswer);
        }
    };

    public String viewFaqAnswer() {
        ConversationContext<FaqAnswer> ctx = FaqAnswerController.newEditContext(faqAnswers.getSelectedRow());
        ctx.setLabelWithKey("faqQuestion_faqAnswers");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link FaqAnswer}.
     */
    public void onFaqAnswerRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewFaqAnswer() : editFaqAnswer());
    }

    public void removeFaqAnswer() {
        getFaqQuestion().removeFaqAnswer(faqAnswers.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", faqAnswers.getSelectedRow());
    }

    public String addFaqAnswer() {
        FaqAnswer faqAnswer = new FaqAnswer();
        faqAnswer.setFaqQuestion(getFaqQuestion()); // for display
        ConversationContext<FaqAnswer> ctx = FaqAnswerController.newEditContext(faqAnswer);
        ctx.setLabelWithKey("faqQuestion_faqAnswers");
        ctx.setCallBack(addFaqAnswerCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<FaqAnswer> addFaqAnswerCallBack = new ConversationCallBack<FaqAnswer>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(FaqAnswer faqAnswer) {
            getFaqQuestion().addFaqAnswer(faqAnswer);
            messageUtil.infoEntity("status_added_new_ok", faqAnswer);
        }
    };
}