/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package com.dddzer.web.domain;

import static com.dddzer.web.conversation.ConversationHolder.getCurrentConversation;
import javax.inject.Inject;
import javax.inject.Named;
import org.springframework.context.annotation.Scope;
import com.dddzer.domain.Account;
import com.dddzer.domain.User;
import com.dddzer.repository.UserRepository;
import com.dddzer.web.conversation.ConversationCallBack;
import com.dddzer.web.conversation.ConversationContext;
import com.dddzer.web.domain.AccountController;
import com.dddzer.web.domain.support.GenericEditForm;

/**
 * View Helper/Controller to edit {@link User}.
 */
@Named
@Scope("conversation")
public class UserEditForm extends GenericEditForm<User, Integer> {

    @Inject
    public void setUserRepository(UserRepository userRepository) {
        setRepository(userRepository);
    }

    public User getUser() {
        return getEntity();
    }

    // --------------------------------------------------
    // Support for auto-complete and callback many to one 
    // --------------------------------------------------

    public void setSelectedAccount(Account account) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        if (getUser().getAccount() != null) {
            getCurrentConversation().getEntityManager().detach(getUser().getAccount());
        }

        if (account != null) {
            getUser().setAccount(getCurrentConversation().getEntityManager().merge(account));
        } else {
            getUser().setAccount(null);
        }
    }

    public Account getSelectedAccount() {
        return getUser().getAccount();
    }

    // --------------------------------------------
    // Actions for account association
    // --------------------------------------------

    public String viewAccount() {
        ConversationContext<Account> ctx = AccountController.newEditContext(getUser().getAccount());
        ctx.setLabelWithKey("user_account");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    public String selectAccount() {
        ConversationContext<Account> ctx = AccountController.newSearchContext();
        ctx.setLabelWithKey("user_account");
        ctx.setCallBack(selectAccountCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Account> selectAccountCallBack = new ConversationCallBack<Account>() {
        private static final long serialVersionUID = 1L;

        // will be invoked from the UserLazyDataModel
        @Override
        protected void onSelected(Account account) {
            setSelectedAccount(account);
            messageUtil.infoEntity("status_selected_ok", getUser().getAccount());
        }
    };

    public String addAccount() {
        ConversationContext<Account> ctx = AccountController.newEditContext(new Account());
        ctx.setLabelWithKey("user_account");
        ctx.setCallBack(addAccountCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Account> addAccountCallBack = new ConversationCallBack<Account>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Account account) {
            // detach the currently set target if present
            if (getUser().getAccount() != null) {
                getCurrentConversation().getEntityManager().detach(getUser().getAccount());
            }

            getUser().setAccount(account);
            messageUtil.infoEntity("status_created_ok", account);
        }
    };

    public String editAccount() {
        ConversationContext<Account> ctx = AccountController.newEditContext(getUser().getAccount());
        ctx.setLabelWithKey("user_account");
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }
}