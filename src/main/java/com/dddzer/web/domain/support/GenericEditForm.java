/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericEditForm.p.vm.java
 */
package com.dddzer.web.domain.support;

import static com.dddzer.web.conversation.ConversationHolder.getCurrentConversation;

import java.io.Serializable;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import com.dddzer.dao.support.JpaUniqueUtil;
import com.dddzer.domain.Identifiable;
import com.dddzer.repository.support.Repository;
import com.dddzer.web.conversation.ConversationContext;
import com.dddzer.web.util.MessageUtil;

/**
 * Base Edit Form for JPA entities.
 */
public abstract class GenericEditForm<E extends Identifiable<PK>, PK extends Serializable> {
    private E entity;

    @Inject
    protected JpaUniqueUtil jpaUniqueUtil;

    @Inject
    protected MessageUtil messageUtil;

    protected Repository<E, PK> repository;

    protected void setRepository(Repository<E, PK> repository) {
        this.repository = repository;
    }

    /**
     * Retrieves the entity or entityId parameter from the current ConversationContext and
     * load the entity from the repository in case the entityId was found in the current ConversationContext. 
     */
    @PostConstruct
    protected void init() {
        PK entityIdParam = context().getEntityIdAndRemove();

        if (entityIdParam != null) {
            this.entity = repository.getById(entityIdParam);
        } else {
            this.entity = context().getEntityAndRemove();
        }

        if (this.entity == null) {
            throw new IllegalStateException("Could not find any entity. Please fix me");
        }
    }

    /**
     * Return the entity that this edit form backs.
     */
    public E getEntity() {
        return entity;
    }

    // ------------------------------------
    // Actions
    // ------------------------------------

    /**
     * Ok action is used from sub page (non-readonly) to send the data without saving it. 
     * It is expected to be ajax since we want to display the errors, if any,
     * without refreshing the page.
     */
    public String ok() {
        return context().getCallBack().ok(getEntity());
    }

    /**
     * Close the current edit page, without any dirty data checking.
     */
    public String forceClose() {
        return context().getCallBack().notSaved(getEntity());
    }

    /**
     * Back action is used from readonly page to go back. It is expected to be non-ajax.
     */
    public String back() {
        return context().getCallBack().back();
    }

    /**
     * deleteAndClose action is used form modal dialogs in the main edit page. 
     */
    public String deleteAndClose() {
        E entity = getEntity();
        repository.delete(entity);
        messageUtil.infoEntity("status_deleted_ok", entity);
        return context().getCallBack().deleted(entity);
    }

    /**
     * Save action. Used from main edit page. Expected to be an ajax request.
     */
    public String saveAndClose() {
        if (saveAndCloseInternal(getEntity())) {
            return context().getCallBack().saved(getEntity());
        }
        return null;
    }

    protected boolean saveAndCloseInternal(E entity) {
        if (!validate(entity)) {
            return false;
        }
        repository.save(entity);
        messageUtil.infoEntity("status_saved_ok", entity);
        return true;
    }

    public boolean validate(E entity) {
        List<String> errors = jpaUniqueUtil.validateUniques(entity);
        for (String error : errors) {
            messageUtil.error(error);
        }
        return errors.isEmpty();
    }

    /**
     * Returns the current {@link ConversationContext}.
     */
    public ConversationContext<E> context() {
        return getCurrentConversation().getCurrentContext();
    }
}