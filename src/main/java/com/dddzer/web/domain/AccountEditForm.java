/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package com.dddzer.web.domain;

import static com.dddzer.web.conversation.ConversationHolder.getCurrentConversation;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import org.omnifaces.util.Faces;
import org.primefaces.event.SelectEvent;
import org.springframework.context.annotation.Scope;
import com.dddzer.domain.Account;
import com.dddzer.domain.FaqQuestion;
import com.dddzer.domain.Part;
import com.dddzer.domain.Role;
import com.dddzer.repository.AccountRepository;
import com.dddzer.web.conversation.ConversationCallBack;
import com.dddzer.web.conversation.ConversationContext;
import com.dddzer.web.domain.support.GenericEditForm;
import com.dddzer.web.domain.support.SelectableListDataModel;
import com.dddzer.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link Account}.
 */
@Named
@Scope("conversation")
public class AccountEditForm extends GenericEditForm<Account, Integer> {
    private TabBean tabBean = new TabBean();
    private SelectableListDataModel<Part> parts;
    private SelectableListDataModel<FaqQuestion> faqQuestions;
    private SelectableListDataModel<Role> roles;

    @Inject
    public void setAccountRepository(AccountRepository accountRepository) {
        setRepository(accountRepository);
    }

    /**
     * Prepare the x-to-many list data models.
     */
    @Override
    @PostConstruct
    protected void init() {
        super.init();

        // _HACK_ Attention: you must realize that associations below (when lazy) are fetched from the view, non transactionnally.

        if (parts == null) {
            parts = new SelectableListDataModel<Part>(getAccount().getParts());
        }

        if (faqQuestions == null) {
            faqQuestions = new SelectableListDataModel<FaqQuestion>(getAccount().getFaqQuestions());
        }

        if (roles == null) {
            roles = new SelectableListDataModel<Role>(getAccount().getRoles());
        }
    }

    public Account getAccount() {
        return getEntity();
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    public TabBean getTabBean() {
        return tabBean;
    }

    public SelectableListDataModel<Part> getParts() {
        return parts;
    }

    public SelectableListDataModel<FaqQuestion> getFaqQuestions() {
        return faqQuestions;
    }

    public SelectableListDataModel<Role> getRoles() {
        return roles;
    }

    // --------------------------------------------
    // Actions for part association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected part.
     */
    public String editPart() {
        ConversationContext<Part> ctx = PartController.newEditContext(parts.getSelectedRow());
        ctx.setLabelWithKey("account_parts");
        ctx.setCallBack(editPartCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Part> editPartCallBack = new ConversationCallBack<Part>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Part part) {
            messageUtil.infoEntity("status_edited_ok", part);
        }
    };

    public String viewPart() {
        ConversationContext<Part> ctx = PartController.newEditContext(parts.getSelectedRow());
        ctx.setLabelWithKey("account_parts");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link Part}.
     */
    public void onPartRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewPart() : editPart());
    }

    public void removePart() {
        getAccount().removePart(parts.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", parts.getSelectedRow());
    }

    public String addPart() {
        Part part = new Part();
        part.setAccount(getAccount()); // for display
        ConversationContext<Part> ctx = PartController.newEditContext(part);
        ctx.setLabelWithKey("account_parts");
        ctx.setCallBack(addPartCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Part> addPartCallBack = new ConversationCallBack<Part>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Part part) {
            getAccount().addPart(part);
            messageUtil.infoEntity("status_added_new_ok", part);
        }
    };

    // --------------------------------------------
    // Actions for faqQuestion association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected faqQuestion.
     */
    public String editFaqQuestion() {
        ConversationContext<FaqQuestion> ctx = FaqQuestionController.newEditContext(faqQuestions.getSelectedRow());
        ctx.setLabelWithKey("account_faqQuestions");
        ctx.setCallBack(editFaqQuestionCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<FaqQuestion> editFaqQuestionCallBack = new ConversationCallBack<FaqQuestion>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(FaqQuestion faqQuestion) {
            messageUtil.infoEntity("status_edited_ok", faqQuestion);
        }
    };

    public String viewFaqQuestion() {
        ConversationContext<FaqQuestion> ctx = FaqQuestionController.newEditContext(faqQuestions.getSelectedRow());
        ctx.setLabelWithKey("account_faqQuestions");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link FaqQuestion}.
     */
    public void onFaqQuestionRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewFaqQuestion() : editFaqQuestion());
    }

    public void removeFaqQuestion() {
        getAccount().removeFaqQuestion(faqQuestions.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", faqQuestions.getSelectedRow());
    }

    public String addFaqQuestion() {
        FaqQuestion faqQuestion = new FaqQuestion();
        faqQuestion.setAccount(getAccount()); // for display
        ConversationContext<FaqQuestion> ctx = FaqQuestionController.newEditContext(faqQuestion);
        ctx.setLabelWithKey("account_faqQuestions");
        ctx.setCallBack(addFaqQuestionCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<FaqQuestion> addFaqQuestionCallBack = new ConversationCallBack<FaqQuestion>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(FaqQuestion faqQuestion) {
            getAccount().addFaqQuestion(faqQuestion);
            messageUtil.infoEntity("status_added_new_ok", faqQuestion);
        }
    };

    // --------------------------------------------
    // Actions for role association
    // --------------------------------------------
    public String selectRole() {
        ConversationContext<Role> ctx = RoleController.newSearchContext();
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(selectRoleCallBack);
        ctx.setVar("multiCheckboxSelection", true);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Role> selectRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onSelected(List<Role> roles) {
            for (Role role : roles) {
                Role mergedRole = getCurrentConversation().getEntityManager().merge(role);
                if (!getAccount().containsRole(mergedRole)) {
                    getAccount().addRole(mergedRole);
                    messageUtil.infoEntity("status_added_existing_ok", mergedRole);
                }
            }
        }
    };

    /**
     * Action with implicit navigation to edit the selected role.
     */
    public String editRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(roles.getSelectedRow());
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(editRoleCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Role> editRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Role role) {
            messageUtil.infoEntity("status_edited_ok", role);
        }
    };

    public String viewRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(roles.getSelectedRow());
        ctx.setLabelWithKey("account_roles");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link Role}.
     */
    public void onRoleRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewRole() : editRole());
    }

    public void removeRole() {
        getAccount().removeRole(roles.getSelectedRow());
        // let's detach it for 2 reasons: 
        //  1) to prevent any potential modification to go to the db
        //  2) reduce session size	
        getCurrentConversation().getEntityManager().detach(roles.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", roles.getSelectedRow());
    }

    public String addRole() {
        ConversationContext<Role> ctx = RoleController.newEditContext(new Role());
        ctx.setLabelWithKey("account_roles");
        ctx.setCallBack(addRoleCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Role> addRoleCallBack = new ConversationCallBack<Role>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Role role) {
            getAccount().addRole(role);
            messageUtil.infoEntity("status_added_new_ok", role);
        }
    };
}