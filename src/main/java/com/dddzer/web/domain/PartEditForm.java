/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 */
package com.dddzer.web.domain;

import static com.dddzer.web.conversation.ConversationHolder.getCurrentConversation;
import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import org.omnifaces.util.Faces;
import org.primefaces.event.SelectEvent;
import org.springframework.context.annotation.Scope;
import com.dddzer.domain.Account;
import com.dddzer.domain.Category;
import com.dddzer.domain.Part;
import com.dddzer.domain.Product;
import com.dddzer.repository.PartRepository;
import com.dddzer.web.conversation.ConversationCallBack;
import com.dddzer.web.conversation.ConversationContext;
import com.dddzer.web.domain.AccountController;
import com.dddzer.web.domain.CategoryController;
import com.dddzer.web.domain.support.GenericEditForm;
import com.dddzer.web.domain.support.SelectableListDataModel;
import com.dddzer.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link Part}.
 */
@Named
@Scope("conversation")
public class PartEditForm extends GenericEditForm<Part, Integer> {
    private TabBean tabBean = new TabBean();
    private SelectableListDataModel<Product> products;

    @Inject
    public void setPartRepository(PartRepository partRepository) {
        setRepository(partRepository);
    }

    /**
     * Prepare the x-to-many list data models.
     */
    @Override
    @PostConstruct
    protected void init() {
        super.init();

        // _HACK_ Attention: you must realize that associations below (when lazy) are fetched from the view, non transactionnally.

        if (products == null) {
            products = new SelectableListDataModel<Product>(getPart().getProducts());
        }
    }

    public Part getPart() {
        return getEntity();
    }

    // --------------------------------------------------
    // Support for auto-complete and callback many to one 
    // --------------------------------------------------

    public void setSelectedCategory(Category category) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        if (getPart().getCategory() != null) {
            getCurrentConversation().getEntityManager().detach(getPart().getCategory());
        }

        if (category != null) {
            getPart().setCategory(getCurrentConversation().getEntityManager().merge(category));
        } else {
            getPart().setCategory(null);
        }
    }

    public Category getSelectedCategory() {
        return getPart().getCategory();
    }

    public void setSelectedAccount(Account account) {
        // detach the currently set target if present
        //  1) to prevent any potential modification to go to the db
        //  2) to reduce session size        	
        /*
        if (getPart().getAccount() != null) {
            getCurrentConversation().getEntityManager().detach(getPart().getAccount());
        } */

        if (account != null) {
            getPart().setAccount(getCurrentConversation().getEntityManager().merge(account));
        } else {
            getPart().setAccount(null);
        }
    }

    public Account getSelectedAccount() {
        return getPart().getAccount();
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    public TabBean getTabBean() {
        return tabBean;
    }

    public SelectableListDataModel<Product> getProducts() {
        return products;
    }

    // --------------------------------------------
    // Actions for category association
    // --------------------------------------------

    public String viewCategory() {
        ConversationContext<Category> ctx = CategoryController.newEditContext(getPart().getCategory());
        ctx.setLabelWithKey("part_category");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    public String selectCategory() {
        ConversationContext<Category> ctx = CategoryController.newSearchContext();
        ctx.setLabelWithKey("part_category");
        ctx.setCallBack(selectCategoryCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Category> selectCategoryCallBack = new ConversationCallBack<Category>() {
        private static final long serialVersionUID = 1L;

        // will be invoked from the PartLazyDataModel
        @Override
        protected void onSelected(Category category) {
            setSelectedCategory(category);
            messageUtil.infoEntity("status_selected_ok", getPart().getCategory());
        }
    };

    public String addCategory() {
        ConversationContext<Category> ctx = CategoryController.newEditContext(new Category());
        ctx.setLabelWithKey("part_category");
        ctx.setCallBack(addCategoryCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Category> addCategoryCallBack = new ConversationCallBack<Category>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Category category) {
            // detach the currently set target if present
            if (getPart().getCategory() != null) {
                getCurrentConversation().getEntityManager().detach(getPart().getCategory());
            }

            getPart().setCategory(category);
            messageUtil.infoEntity("status_created_ok", category);
        }
    };

    public String editCategory() {
        ConversationContext<Category> ctx = CategoryController.newEditContext(getPart().getCategory());
        ctx.setLabelWithKey("part_category");
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    // --------------------------------------------
    // Actions for account association
    // --------------------------------------------

    public String viewAccount() {
        ConversationContext<Account> ctx = AccountController.newEditContext(getPart().getAccount());
        ctx.setLabelWithKey("part_account");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    // --------------------------------------------
    // Actions for product association
    // --------------------------------------------

    /**
     * Action with implicit navigation to edit the selected product.
     */
    public String editProduct() {
        ConversationContext<Product> ctx = ProductController.newEditContext(products.getSelectedRow());
        ctx.setLabelWithKey("part_products");
        ctx.setCallBack(editProductCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Product> editProductCallBack = new ConversationCallBack<Product>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Product product) {
            messageUtil.infoEntity("status_edited_ok", product);
        }
    };

    public String viewProduct() {
        ConversationContext<Product> ctx = ProductController.newEditContext(products.getSelectedRow());
        ctx.setLabelWithKey("part_products");
        getCurrentConversation().setNextContextSubReadOnly(ctx);
        return ctx.view();
    }

    /**
     * This listener force the navigation to the edit or view page of the target @{link Product}.
     */
    public void onProductRowSelect(SelectEvent event) {
        Faces.navigate(context().isReadOnly() ? viewProduct() : editProduct());
    }

    public void removeProduct() {
        getPart().removeProduct(products.getSelectedRow());
        messageUtil.infoEntity("status_removed_ok", products.getSelectedRow());
    }

    public String addProduct() {
        Product product = new Product();
        product.setPart(getPart()); // for display
        ConversationContext<Product> ctx = ProductController.newEditContext(product);
        ctx.setLabelWithKey("part_products");
        ctx.setCallBack(addProductCallBack);
        getCurrentConversation().setNextContextSub(ctx);
        return ctx.view();
    }

    protected ConversationCallBack<Product> addProductCallBack = new ConversationCallBack<Product>() {
        private static final long serialVersionUID = 1L;

        @Override
        protected void onOk(Product product) {
            getPart().addProduct(product);
            messageUtil.infoEntity("status_added_new_ok", product);
        }
    };
}