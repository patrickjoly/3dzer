/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.dddzer.domain;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import com.dddzer.domain.Account;
import com.dddzer.domain.Category;
import com.dddzer.domain.IdentifiableHashBuilder;
import com.dddzer.domain.Product;
import com.google.common.base.Objects;

@Entity
@Table(name = "part")
@FilterDef(name = "myPartFilter", defaultCondition = "account_id = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.IntegerType"))
@Filter(name = "myPartFilter")
public class Part implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Part.class);

    // Raw attributes
    private Integer id; // pk
    private String name;
    private String model;
    private String serial;
    private String partCode;
    private String partName;

    // Technical attributes for query by example
    private Integer accountId; // not null
    private Integer categoryId; // not null

    // Many to one
    private Category category; // not null (categoryId)
    private Account account; // not null (accountId)

    // One to many
    private List<Product> products = new ArrayList<Product>();

    // ---------------------------
    // Constructors
    // ---------------------------

    public Part() {
    }

    public Part(Integer primaryKey) {
        setId(primaryKey);
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @NotNull
    @Column(name = "id", precision = 10)
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [accountId] ------------------------

    @Column(name = "account_id", nullable = false, precision = 10, insertable = false, updatable = false)
    public Integer getAccountId() {
        return accountId;
    }

    private void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }

    // -- [name] ------------------------

    @Size(max = 45)
    @Column(name = "name", length = 45)
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // -- [model] ------------------------

    @Size(max = 45)
    @Column(name = "model", length = 45)
    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    // -- [serial] ------------------------

    @Size(max = 45)
    @Column(name = "serial", length = 45)
    public String getSerial() {
        return serial;
    }

    public void setSerial(String serial) {
        this.serial = serial;
    }

    // -- [partCode] ------------------------

    @Size(max = 45)
    @Column(name = "part_code", length = 45)
    public String getPartCode() {
        return partCode;
    }

    public void setPartCode(String partCode) {
        this.partCode = partCode;
    }

    // -- [partName] ------------------------

    @Size(max = 45)
    @Column(name = "part_name", length = 45)
    public String getPartName() {
        return partName;
    }

    public void setPartName(String partName) {
        this.partName = partName;
    }

    // -- [categoryId] ------------------------

    @Column(name = "category_id", nullable = false, precision = 10, insertable = false, updatable = false)
    public Integer getCategoryId() {
        return categoryId;
    }

    private void setCategoryId(Integer categoryId) {
        this.categoryId = categoryId;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Part.categoryId ==> Category.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @NotNull
    @JoinColumn(name = "category_id", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Category getCategory() {
        return category;
    }

    /**
     * Set the category without adding this Part instance on the passed category
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link Category}
     */
    public void setCategory(Category category) {
        this.category = category;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (category != null) {
            setCategoryId(category.getId());
        } else {
            setCategoryId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Part.accountId ==> Account.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "account_id", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Account getAccount() {
        return account;
    }

    /**
     * Set the account without adding this Part instance on the passed account
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link Account}
     */
    public void setAccount(Account account) {
        this.account = account;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (account != null) {
            setAccountId(account.getId());
        } else {
            setAccountId(null);
        }
    }

    // --------------------------------------------------------------------
    // One to Many support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: part ==> products
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @OneToMany(mappedBy = "part", orphanRemoval = true, cascade = ALL)
    public List<Product> getProducts() {
        return products;
    }

    /**
     * Set the {@link Product} list.
     * It is recommended to use the helper method {@link #addProduct(Product)} / {@link #removeProduct(Product)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param products the list to set
     */
    public void setProducts(List<Product> products) {
        this.products = products;
    }

    /**
     * Helper method to add the passed {@link Product} to the products list
     * and set this part on the passed product to preserve referential
     * integrity at the object level.
     *
     * @param product the to add
     * @return true if the product could be added to the products list, false otherwise
     */
    public boolean addProduct(Product product) {
        if (getProducts().add(product)) {
            product.setPart((Part) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to remove the passed {@link Product} from the products list and unset
     * this part from the passed product to preserve referential integrity at the object level.
     *
     * @param product the instance to remove
     * @return true if the product could be removed from the products list, false otherwise
     */
    public boolean removeProduct(Product product) {
        if (getProducts().remove(product)) {
            product.setPart(null);
            return true;
        }
        return false;
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Part && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Part instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("accountId", getAccountId()) //
                .add("name", getName()) //
                .add("model", getModel()) //
                .add("serial", getSerial()) //
                .add("partCode", getPartCode()) //
                .add("partName", getPartName()) //
                .add("categoryId", getCategoryId()) //
                .toString();
    }
}