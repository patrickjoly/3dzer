/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.dddzer.domain;

import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import com.dddzer.domain.Account;
import com.dddzer.domain.IdentifiableHashBuilder;
import com.dddzer.domain.Part;
import com.dddzer.domain.ProductType;
import com.google.common.base.Objects;

@Entity
@Table(name = "product")
@FilterDef(name = "myProductFilter", defaultCondition = "accout_id = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.IntegerType"))
@Filter(name = "myProductFilter")
public class Product implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Product.class);

    // Raw attributes
    private Integer id; // pk
    private Integer productSize;
    private String productFileName;
    private String productContentType;
    private byte[] productBinary;
    private String description_;
    private Integer price;

    // Technical attributes for query by example
    private Integer productTypeId; // not null
    private Integer partId; // not null
    private Integer accoutId;

    // Many to one
    private Part part; // not null (partId)
    private Account accout; // (accoutId)
    private ProductType productType; // not null (productTypeId)

    // ---------------------------
    // Constructors
    // ---------------------------

    public Product() {
    }

    public Product(Integer primaryKey) {
        setId(primaryKey);
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(name = "id", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [productTypeId] ------------------------

    @Column(name = "product_type_id", nullable = false, precision = 10, insertable = false, updatable = false)
    public Integer getProductTypeId() {
        return productTypeId;
    }

    private void setProductTypeId(Integer productTypeId) {
        this.productTypeId = productTypeId;
    }

    // -- [productSize] ------------------------

    @Column(name = "product_size", precision = 10)
    public Integer getProductSize() {
        return productSize;
    }

    public void setProductSize(Integer productSize) {
        this.productSize = productSize;
    }

    // -- [productFileName] ------------------------

    @Size(max = 255)
    @Column(name = "product_file_name")
    public String getProductFileName() {
        return productFileName;
    }

    public void setProductFileName(String productFileName) {
        this.productFileName = productFileName;
    }

    // -- [productContentType] ------------------------

    @Size(max = 45)
    @Column(name = "product_content_type", length = 45)
    public String getProductContentType() {
        return productContentType;
    }

    public void setProductContentType(String productContentType) {
        this.productContentType = productContentType;
    }

    // -- [productBinary] ------------------------

    @Basic(fetch = FetchType.LAZY)
    @Column(name = "product_binary")
    @Lob
    public byte[] getProductBinary() {
        return productBinary;
    }

    public void setProductBinary(byte[] productBinary) {
        this.productBinary = productBinary;
    }

    /**
     * Helper method to convert the passed file to a byte[] and set it using {@link #setProductBinary(byte[])}
     * @param localFile to read the content from
     * @see #setProductBinary(byte[])
     */
    public void setProductBinaryFromFile(File localFile) {
        try {
            setProductBinary(FileUtils.readFileToByteArray(localFile));
        } catch (Exception e) {
            throw new RuntimeException("Could not read from file", e);
        }
    }

    /**
     * Helper method to copy productBinary byte array to the passed target file.
     *
     * @return the passed targetFile as a convenience.
     * @throws IllegalStateException when no binary is set
     * @see #getProductBinary()
     */
    @Transient
    @XmlTransient
    public File getProductBinaryToFile(File targetFile) throws IOException {
        if (getProductBinary() != null) {
            throw new IllegalStateException("Empty binary");
        }

        FileUtils.writeByteArrayToFile(targetFile, getProductBinary());
        return targetFile;
    }

    /**
     * Helper method to copy productBinary byte array to a temporary file.
     *
     * @throws IllegalStateException when no binary is set
     * @return a temporary file holding a copy of the productBinary byte array
     * @see #getProductBinary()
     */
    @Transient
    @XmlTransient
    public File getProductBinaryToTempFile() throws IOException {
        return getProductBinaryToFile(File.createTempFile("productBinary", "file"));
    }

    // -- [description_] ------------------------

    @Size(max = 255)
    @Column(name = "description_")
    public String getDescription_() {
        return description_;
    }

    public void setDescription_(String description_) {
        this.description_ = description_;
    }

    // -- [price] ------------------------

    @Column(name = "price", precision = 10)
    public Integer getPrice() {
        return price;
    }

    public void setPrice(Integer price) {
        this.price = price;
    }

    // -- [partId] ------------------------

    @Column(name = "part_id", nullable = false, precision = 10, insertable = false, updatable = false)
    public Integer getPartId() {
        return partId;
    }

    private void setPartId(Integer partId) {
        this.partId = partId;
    }

    // -- [accoutId] ------------------------

    @Column(name = "accout_id", precision = 10, insertable = false, updatable = false)
    public Integer getAccoutId() {
        return accoutId;
    }

    private void setAccoutId(Integer accoutId) {
        this.accoutId = accoutId;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Product.partId ==> Part.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "part_id", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Part getPart() {
        return part;
    }

    /**
     * Set the part without adding this Product instance on the passed part
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link Part}
     */
    public void setPart(Part part) {
        this.part = part;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (part != null) {
            setPartId(part.getId());
        } else {
            setPartId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Product.accoutId ==> Account.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @JoinColumn(name = "accout_id")
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public Account getAccout() {
        return accout;
    }

    /**
     * Set the accout without adding this Product instance on the passed accout
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link Account}
     */
    public void setAccout(Account accout) {
        this.accout = accout;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (accout != null) {
            setAccoutId(accout.getId());
        } else {
            setAccoutId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Product.productTypeId ==> ProductType.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @NotNull
    @JoinColumn(name = "product_type_id", nullable = false)
    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
    public ProductType getProductType() {
        return productType;
    }

    /**
     * Set the productType without adding this Product instance on the passed productType
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by {@link ProductType}
     */
    public void setProductType(ProductType productType) {
        this.productType = productType;

        // We set the foreign key property so it can be used by our JPA search by Example facility.
        if (productType != null) {
            setProductTypeId(productType.getId());
        } else {
            setProductTypeId(null);
        }
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Product && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this Product instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("productTypeId", getProductTypeId()) //
                .add("productSize", getProductSize()) //
                .add("productFileName", getProductFileName()) //
                .add("productContentType", getProductContentType()) //
                .add("productBinary", getProductBinary()) //
                .add("description_", getDescription_()) //
                .add("price", getPrice()) //
                .add("partId", getPartId()) //
                .add("accoutId", getAccoutId()) //
                .toString();
    }
}