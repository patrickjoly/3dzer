/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/domain/Entity.e.vm.java
 */
package com.dddzer.domain;

import static javax.persistence.CascadeType.ALL;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotEmpty;
import com.dddzer.domain.FaqQuestion;
import com.dddzer.domain.Part;
import com.dddzer.domain.Role;
import com.google.common.base.Objects;

@Entity
@Table(name = "account")
@FilterDef(name = "myAccountFilter", defaultCondition = "id = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.IntegerType"))
@Filter(name = "myAccountFilter")
public class Account implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = Logger.getLogger(Account.class);

    // Raw attributes
    private Integer id; // pk
    private String login; // unique (not null)
    private String password; // unique (not null)
    private String email; // not null
    private Boolean isEnabled;

    // One to many
    private List<Part> parts = new ArrayList<Part>();
    private List<FaqQuestion> faqQuestions = new ArrayList<FaqQuestion>();

    // Many to many
    private List<Role> roles = new ArrayList<Role>();

    // ---------------------------
    // Constructors
    // ---------------------------

    public Account() {
    }

    public Account(Integer primaryKey) {
        setId(primaryKey);
    }

    // -------------------------------
    // Role names support
    // -------------------------------

    /**
     * Returns the granted authorities for this user. You may override
     * this method to provide your own custom authorities.
     */
    @Transient
    @XmlTransient
    public List<String> getRoleNames() {
        List<String> roleNames = new ArrayList<String>();

        for (Role role : getRoles()) {
            roleNames.add(role.getRoleName());
        }

        return roleNames;
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    // -- [id] ------------------------

    @Column(name = "id", precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [login] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Column(name = "login", nullable = false, unique = true, length = 100)
    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    // -- [password] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Column(name = "`password`", nullable = false, unique = true, length = 100)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // -- [email] ------------------------

    @Size(max = 100)
    @NotEmpty
    @Email
    @Column(name = "email", nullable = false, length = 100)
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    // -- [isEnabled] ------------------------

    @Column(name = "is_enabled", length = 0)
    public Boolean getIsEnabled() {
        return isEnabled;
    }

    public void setIsEnabled(Boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    // --------------------------------------------------------------------
    // One to Many support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: account ==> parts
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @OneToMany(mappedBy = "account", orphanRemoval = true, cascade = ALL)
    public List<Part> getParts() {
        return parts;
    }

    /**
     * Set the {@link Part} list.
     * It is recommended to use the helper method {@link #addPart(Part)} / {@link #removePart(Part)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param parts the list to set
     */
    public void setParts(List<Part> parts) {
        this.parts = parts;
    }

    /**
     * Helper method to add the passed {@link Part} to the parts list
     * and set this account on the passed part to preserve referential
     * integrity at the object level.
     *
     * @param part the to add
     * @return true if the part could be added to the parts list, false otherwise
     */
    public boolean addPart(Part part) {
        if (getParts().add(part)) {
            part.setAccount((Account) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to remove the passed {@link Part} from the parts list and unset
     * this account from the passed part to preserve referential integrity at the object level.
     *
     * @param part the instance to remove
     * @return true if the part could be removed from the parts list, false otherwise
     */
    public boolean removePart(Part part) {
        if (getParts().remove(part)) {
            part.setAccount(null);
            return true;
        }
        return false;
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: account ==> faqQuestions
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @OneToMany(mappedBy = "account", orphanRemoval = true, cascade = ALL)
    public List<FaqQuestion> getFaqQuestions() {
        return faqQuestions;
    }

    /**
     * Set the {@link FaqQuestion} list.
     * It is recommended to use the helper method {@link #addFaqQuestion(FaqQuestion)} / {@link #removeFaqQuestion(FaqQuestion)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param faqQuestions the list to set
     */
    public void setFaqQuestions(List<FaqQuestion> faqQuestions) {
        this.faqQuestions = faqQuestions;
    }

    /**
     * Helper method to add the passed {@link FaqQuestion} to the faqQuestions list
     * and set this account on the passed faqQuestion to preserve referential
     * integrity at the object level.
     *
     * @param faqQuestion the to add
     * @return true if the faqQuestion could be added to the faqQuestions list, false otherwise
     */
    public boolean addFaqQuestion(FaqQuestion faqQuestion) {
        if (getFaqQuestions().add(faqQuestion)) {
            faqQuestion.setAccount((Account) this);
            return true;
        }
        return false;
    }

    /**
     * Helper method to remove the passed {@link FaqQuestion} from the faqQuestions list and unset
     * this account from the passed faqQuestion to preserve referential integrity at the object level.
     *
     * @param faqQuestion the instance to remove
     * @return true if the faqQuestion could be removed from the faqQuestions list, false otherwise
     */
    public boolean removeFaqQuestion(FaqQuestion faqQuestion) {
        if (getFaqQuestions().remove(faqQuestion)) {
            faqQuestion.setAccount(null);
            return true;
        }
        return false;
    }

    // --------------------------------------------------------------------
    // Many to Many
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-many: account ==> roles
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    /**
     * Returns the roles list.
     */
    @JoinTable(name = "account_role", joinColumns = @JoinColumn(name = "account_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
    @ManyToMany(cascade = { PERSIST, MERGE })
    public List<Role> getRoles() {
        return roles;
    }

    /**
     * Set the roles list.
     * <p>
     * It is recommended to use the helper method {@link #addRole(Role)} / {@link #removeRole(Role)}
     * if you want to preserve referential integrity at the object level.
     *
     * @param roles the list of Role
     */
    public void setRoles(List<Role> roles) {
        this.roles = roles;
    }

    /**
     * Helper method to add the passed {@link Role} to the roles list.
     */
    public boolean addRole(Role role) {
        return getRoles().add(role);
    }

    /**
     * Helper method to remove the passed {@link Role} from the roles list.
     */
    public boolean removeRole(Role role) {
        return getRoles().remove(role);
    }

    /**
     * Helper method to determine if the passed {@link Role} is present in the roles list.
     */
    public boolean containsRole(Role role) {
        return getRoles() != null && getRoles().contains(role);
    }

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    /**
     * equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof Account && hashCode() == other.hashCode());
    }

    private volatile int previousHashCode = 0;

    @Override
    public int hashCode() {
        int hashCode = Objects.hashCode(getLogin());
        if (previousHashCode != 0 && previousHashCode != hashCode) {
            log.warn("DEVELOPER: hashCode has changed!." //
                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
                    + getClass().getCanonicalName());
        }

        previousHashCode = hashCode;
        return hashCode;
    }

    /**
     * Construct a readable string representation for this Account instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return Objects.toStringHelper(this) //
                .add("id", getId()) //
                .add("login", getLogin()) //
                .add("password", getPassword()) //
                .add("email", getEmail()) //
                .add("isEnabled", getIsEnabled()) //
                .toString();
    }
}